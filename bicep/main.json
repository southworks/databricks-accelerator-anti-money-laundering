{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.33.93.31351",
      "templateHash": "10738658247407308977"
    }
  },
  "parameters": {
    "databricksResourceName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure Databricks workspace to create."
      }
    },
    "googleStreetApiKey": {
      "type": "securestring",
      "minLength": 15,
      "metadata": {
        "description": "Google street API key to be used in the notebooks."
      }
    }
  },
  "variables": {
    "acceleratorRepoName": "databricks-accelerator-anti-money-laundering",
    "randomString": "[uniqueString(resourceGroup().id, parameters('databricksResourceName'), variables('acceleratorRepoName'))]",
    "managedResourceGroupName": "[format('databricks-rg-{0}-{1}', parameters('databricksResourceName'), variables('randomString'))]",
    "location": "[resourceGroup().location]"
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[variables('randomString')]",
      "location": "[variables('location')]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(variables('randomString'))]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('randomString')), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('randomString'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2023-08-01",
      "name": "[format('create-databricks-{0}', variables('randomString'))]",
      "location": "[variables('location')]",
      "kind": "AzureCLI",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('randomString')))]": {}
        }
      },
      "properties": {
        "azCliVersion": "2.49.0",
        "arguments": "[format('-resourceName {0} -resourceGroupName {1} -location {2} -sku premium -managedResourceGroupName {3}', parameters('databricksResourceName'), resourceGroup().name, variables('location'), variables('managedResourceGroupName'))]",
        "scriptContent": "      # Define parameters\r\n      resource_name=$1\r\n      resource_group_name=$2\r\n      location=$3\r\n      sku=$4\r\n      managed_resource_group_name=$5\r\n\r\n      # Check if the workspace exists\r\n      workspace=$(az databricks workspace show --resource-group \"$resource_group_name\" --name \"$resource_name\" --query \"id\" -o tsv 2>/dev/null)\r\n      if [ -n \"$workspace\" ]; then\r\n        # Retrieve the SKU of the existing workspace\r\n        current_sku=$(az databricks workspace show --resource-group \"$resource_group_name\" --name \"$resource_name\" --query \"sku.name\" -o tsv)\r\n\r\n        # Validate the SKU\r\n        if [ \"$current_sku\" != \"$sku\" ]; then\r\n          echo \"The existing Databricks workspace does not have the required SKU '$sku'. Current SKU: $current_sku\"\r\n          exit 1\r\n        fi\r\n      else\r\n        # Create a new workspace\r\n        echo \"Creating new Databricks workspace: $resource_name\"\r\n        az databricks workspace create \\\r\n          --name \"$resource_name\" \\\r\n          --resource-group \"$resource_group_name\" \\\r\n          --location \"$location\" \\\r\n          --sku \"$sku\" \\\r\n          --managed-resource-group \"$managed_resource_group_name\"\r\n\r\n        # Wait for provisioning to complete\r\n        retry_count=0\r\n        while true; do\r\n          provisioning_state=$(az databricks workspace show --resource-group \"$resource_group_name\" --name \"$resource_name\" --query \"provisioningState\" -o tsv)\r\n          echo \"Current state: $provisioning_state (attempt $retry_count)\"\r\n          if [ \"$provisioning_state\" == \"Succeeded\" ]; then\r\n            break\r\n          elif [ $retry_count -ge 40 ]; then\r\n            echo \"Timeout waiting for workspace provisioning.\"\r\n            exit 1\r\n          fi\r\n          sleep 15\r\n          retry_count=$((retry_count + 1))\r\n        done\r\n      fi\r\n\r\n      # Output the workspace ID to signal completion\r\n      workspace_id=$(az databricks workspace show --resource-group \"$resource_group_name\" --name \"$resource_name\" --query \"id\" -o tsv)\r\n      echo \"{\\\"WorkspaceId\\\": \\\"$workspace_id\\\", \\\"Exists\\\": \\\"True\\\"}\" > $AZ_SCRIPTS_OUTPUT_PATH\r\n    ",
        "timeout": "PT1H",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "PT2H"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('randomString'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('databricks-module-{0}', variables('randomString'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "acceleratorRepoName": {
            "value": "[variables('acceleratorRepoName')]"
          },
          "databricksResourceName": {
            "value": "[parameters('databricksResourceName')]"
          },
          "googleStreetApiKey": {
            "value": "[parameters('googleStreetApiKey')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "managedIdentityName": {
            "value": "[variables('randomString')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "12356058708416897224"
            }
          },
          "parameters": {
            "acceleratorRepoName": {
              "type": "string"
            },
            "databricksResourceName": {
              "type": "string"
            },
            "googleStreetApiKey": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "managedIdentityName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2023-08-01",
              "name": "[format('job-creation-{0}', parameters('acceleratorRepoName'))]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))]": {}
                }
              },
              "kind": "AzureCLI",
              "properties": {
                "azCliVersion": "2.9.1",
                "scriptContent": "      set -e\r\n      curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh\r\n\r\n      # Create a secret scope\r\n      databricks secrets create-scope solution-accelerator-cicd\r\n\r\n      # Add the secret to the scope\r\n      databricks secrets put-secret solution-accelerator-cicd google-api --string-value \"${SECRET}\"\r\n\r\n      repo_path=\"/Users/${ARM_CLIENT_ID}/${ACCELERATOR_REPO_NAME}\"\r\n      repo_info=$(databricks repos get \"${repo_path}\" 2>/dev/null || true)\r\n\r\n      # Check if the repo exists; if not, create it. If it exists, update it.\r\n      if [ -z \"$repo_info\" ]; then\r\n          echo \"Repository does not exist. Creating...\"\r\n          databricks repos create https://github.com/southworks/${ACCELERATOR_REPO_NAME} gitHub\r\n      else\r\n          echo \"Repository exists. Updating to latest main branch...\"\r\n          repo_id=$(databricks repos get \"${repo_path}\" | jq -r '.id')\r\n          databricks repos update ${repo_id} --branch main\r\n      fi\r\n      databricks workspace export ${repo_path}/bicep/job-template.json > job-template.json\r\n      notebook_path=\"${repo_path}/RUNME\"\r\n      jq \".tasks[0].notebook_task.notebook_path = \\\"${notebook_path}\\\"\" job-template.json > job.json\r\n      job_page_url=$(databricks jobs submit --json @./job.json | jq -r '.run_page_url')\r\n      echo \"{\\\"job_page_url\\\": \\\"$job_page_url\\\"}\" > $AZ_SCRIPTS_OUTPUT_PATH\r\n      ",
                "environmentVariables": [
                  {
                    "name": "DATABRICKS_AZURE_RESOURCE_ID",
                    "value": "[resourceId('Microsoft.Databricks/workspaces', parameters('databricksResourceName'))]"
                  },
                  {
                    "name": "ARM_CLIENT_ID",
                    "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2023-01-31').clientId]"
                  },
                  {
                    "name": "ARM_USE_MSI",
                    "value": "true"
                  },
                  {
                    "name": "ACCELERATOR_REPO_NAME",
                    "value": "[parameters('acceleratorRepoName')]"
                  },
                  {
                    "name": "SECRET",
                    "secureValue": "[parameters('googleStreetApiKey')]"
                  }
                ],
                "timeout": "PT1H",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "PT2H"
              }
            }
          ],
          "outputs": {
            "databricksWorkspaceUrl": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.Databricks/workspaces', parameters('databricksResourceName')), '2024-05-01').workspaceUrl)]"
            },
            "databricksJobUrl": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', format('job-creation-{0}', parameters('acceleratorRepoName'))), '2023-08-01').outputs.job_page_url]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deploymentScripts', format('create-databricks-{0}', variables('randomString')))]"
      ]
    }
  ],
  "outputs": {
    "databricksWorkspaceUrl": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('databricks-module-{0}', variables('randomString'))), '2022-09-01').outputs.databricksWorkspaceUrl.value]"
    },
    "databricksJobUrl": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('databricks-module-{0}', variables('randomString'))), '2022-09-01').outputs.databricksJobUrl.value]"
    }
  }
}